function esdialog(action,Par)
% esdialog(action,Par)
%   Open the Dialog-Window to the results that are achieved by the 
%   optimization with the Evolution Strategy
%
% Note: Current results of the optimization was saved 
%   either on the main window (i.e. figure named 'The Evolution Strategy' with
%     a handle PAR (number)) 
%   or in the file named PAR (a string).
%  
% WHERE =0(1) indicates the calling this file at first time or from others 
%
% Usage: esdialog

% All Rights Reserved, 
% Revision 3.0, Oct. 1996
% Evolution Strategy Toolbox 1993-96
% To Thanh Binh University of Magdeburg Germany


if nargin <2,
   Par='';
   if nargin < 1, 
      action='init';
   end
end
% Get a good font for buttons in this platform.
[fname,fsize] = bestfont(computer);
Std.Units='norm';
Std.FontName=fname;
Std.FontSize=fsize;


switch(action),
  case 'init',
     if isempty(Par),
        error('Data can not be loaded!');return,
     else,
        if isnumeric(Par),
           mainfud=get(Par,'UserData');
           MedError=0;
           if ~iscell(mainfud),
              MedError=1;
           else,
              mainfudL=length(mainfud);
              if (mainfudL==3),
                 ESPop=mainfud{3};
              elseif (mainfudL==4),
                 ESPop=mainfud{4};         
              else,
                 MedError=1;
              end
           end
           if MedError, error('Invalid data in this medium!');return,end

        elseif isstr(Par),
           load([matfile,'.mat']);
           if ~exist('mainfud','var'),
              error('Invalid mat-file!');return,
           end
           ESPop=mainfud{3};
        elseif (get(Par, 'Type') == 'figure')
            mainfud = get(Par, 'UserData');
            ESPop=mainfud{3};
        else
           error('Invalid input variable!');return,
        end
     end 
     dim=ESPop.dim;gf=ESPop.obj';[nI,mf]=size(gf);h1=zeros(nI,1);
     h1(1:5)=[mf dim(1)*dim(2) dim(1) dim(2) nI];
     UserData=[ESPop.obj',ESPop.x'];
     [gfmin,imin]=min(gf,[],1);

     % check if there are more elements of imin having the same values 
     % it is a case, some columns of gf have the selfish minima at the
     % same individual (in the same row).

     i=1; N=(1:nI);
     while i<length(imin),
        d=find(imin==imin(i));imin(d(2:length(d)))=[];
        i=i+1;
     end
     N(imin)=[];
     % from here, all the best individuals stand in the first lines
     gf=[gf(imin,:);gf(N,:)];UserData=[UserData(imin,:);UserData(N,:)];
     [gfmin,imin]=min(gf);     
        
     [fg,txthndl]=diagscrl('init',gf,'Dialog to the obtained Pareto-Set',[imin;1:mf]);

     set(fg,'UserData',{h1,UserData, txthndl'});
     set(findobj('tag','diagscrl-Reload'),'UserData',Par);
         
            
  case 'paretdsp',
     sunit=get(0,'Units');set(0,'units','Pixels'); 
     ss=get(0,'ScreenSize');mywidth=320;myheight=110;set(0,'Units',sunit);
     rect = [.5*(ss(3)-mywidth),.5*(ss(4)-myheight),mywidth,myheight];
     figure('numbertitle','off','units','pixels','Pos',rect, ...
       'name','Choose the Number','Menubar','none','Color',[0 1 1],'Resize','off');

     uicontrol(Std,'Style','text','Pos',[.15 .7 .45 .2],...
       'Back',[.8 .8 .8],'HorizontalAlignment','left',...
       'Fore','black','String','The first Function');
     d1=uicontrol(Std,'Style','edit','Pos',[.7 .7 .15 .2],...
       'Back','white','String',num2str([]));
     uicontrol(Std,'Style','text','Pos',[.15 .4 .45 .2],...
       'Back',[.8 .8 .8],'HorizontalAlignment','left',...
       'Fore','black','String','The second Function');
     d2=uicontrol(Std,'Style','edit','Pos',[.7 .4 .15 .2],...
       'Back','white','String',num2str([]));

     set(gcf,'UserData',[d1 d2])
     uicontrol(Std,'Style','push','String','OK',...
       'Pos',[.6 .05 .2 .2],'callback',[...
       'pl=get(gcf,''UserData'');fg=findobj(''name'',''Dialog to the obtained Pareto-Set'');',...
       'pg=get(fg,''UserData'');n=pg{1}(1);',...
       'n1=str2num(get(pl(1),''string''));n2=str2num(get(pl(2),''string''));',...
       'if (n1 <=n)&(n1 >0)&(n2 <=n)&(n2>0),',...
           'close(gcf);',...
           'pg{1}(6)=n1;pg{1}(7)=n2;set(fg,''UserData'',pg);',...
           'clear pg n n1 n2 pl;esdialog(''paretoplot'');',... 
       'else,',...
           'esmsg(['' The Number must be in the Interval [1,'' int2str(n) '']''],''Error'',''error'');',...
       'end']);

     uicontrol(Std,'Style','push','String','Close',...
       'Pos',[.2 .05 .2 .2],'callback','close(gcf)');


  case 'number',
     sunit=get(0,'Units');set(0,'units','Pixels'); 
     ss=get(0,'ScreenSize');mywidth=320;myheight=100;set(0,'Units',sunit);
     rect = [.5*(ss(3)-mywidth),.5*(ss(4)-myheight),mywidth,myheight];
     figure('units','pixels','Pos',rect,'numbertitle','off', ...
       'name','Choose a Solution','Menubar','none','Color',[0 1 1],'Resize','off');

     uicontrol(Std,'Style','text','Pos',[.15 .6 .45 .2],...
       'Back',[.8 .8 .8],'Fore','black','String','The Solution Nr.:');
     d=uicontrol(Std,'Style','edit','Pos',[.7 .6 .15 .2],...
       'Back','white','String',num2str([]));

     set(gcf,'UserData',d)
     uicontrol(Std,'Style','push','String','OK',...
       'Pos',[.6 .05 .2 .2],'callback',[...
       'pl=get(gcf,''UserData'');fg=findobj(''name'',''Dialog to the obtained Pareto-Set'');',...
       'pg=get(fg,''UserData'');m=pg{1}(5);',...
       'n1=str2num(get(pl,''string''));n2=pg{1}(1)+1;',...
       'if (n1<=m)&(n1>0),',...
            'x=zeros(pg{1}(3),pg{1}(4));x1=x(:);x(:)=pg{2}(n1,n2:end)'',',...
            'f=pg{2}(n1,1:n2-1),clear pl pg m n1 n2 x1;close(gcf),',...
       'else,',...
            'esmsg(['' The Number must be in the Interval [1,'' int2str(m) '']''],''Error'',''error'');',...
       'end;']);
 
     uicontrol(Std,'Style','push','String','Close',...
       'Pos',[.2 .05 .2 .2],'callback','close(gcf)');


  case 'minimax1',
     % min  max (c_i * gf_i(x))
     %  x    i
     % x is a individual in the current population
      
     callback=[...
       'fg=findobj(''name'',''Dialog to the obtained Pareto-Set'');pg=get(fg,''UserData'');',...
       'n=pg{1}(1);gf=pg{2}(:,2:n);d=get(gcf,''UserData'');m=pg{1}(2);c=zeros(1,n-1);',...
       'for i=1:n-1, c(i)=str2num(get(d(i),''string''));end;',...
       'if (sum(c) == 1)&(min(c) >= 0),',...
           'gfnew=gf;',...
           'for i=1:pg{1}(5), gfnew(i,:)=gf(i,:).*c; end;',...
           '[y,imin]=min(max(gfnew''));x=zeros(pg{1}(3),pg{1}(4));x1(:)=x;',...
           'Nr=imin,x(:)=pg{2}(imin,n+1:end), f=gf(imin,:),',...
           'clear x1 m n c pg gf d y imin gfnew;close(gcf);',...
       'else,',...
           'esmsg('' The weighting factors must be positive and normalized!'',''Error'',''error'');',...
       'end'];
     pg=get(gcf,'UserData');
     vlchoice(pg{1}(1),callback);


  case 'minimax2',
     % min  max (gf_i(x) - theta_i)
     %  x    i
     % x is a individual in the current population
     % theta_i are shifts (coeficients) chosen by decision makers (designers)
     % normally theta_i are goals of the optimization and often taken to be
     % selfish minimum value of each of the objective function that is achieved
     % by optimization
       
     pg=get(gcf,'UserData');
     n=pg{1}(1);gf=pg{2}(:,1:n);m=pg{1}(2);gfmin=min(gf);gfnew=gf;
     for i=1:pg{1}(5), 
        gfnew(i,:)=gf(i,:)-gfmin;
     end
     [y,imin]=min(max(gfnew'));x=zeros(pg{1}(3),pg{1}(4));x1(:)=x;
     Nr=imin,x(:)=pg{2}(imin,n+1:end), f=gf(imin,:),


  case 'weighting',
     %       mf 
     %     \--- 
     %      >
     % min /___ (c_i * gf_i(x))
     %  x  i=1 

     callback=[...
       'fg=findobj(''name'',''Dialog to the obtained Pareto-Set'');pg=get(fg,''UserData'');',...
       'n=pg{1}(1);gf=pg{2}(:,2:n);d=get(gcf,''UserData'');m=pg{1}(2);c=zeros(1,n-1);',...
       'for i=1:n-1, c(i)=str2num(get(d(i),''string''));end;',...
       'if (sum(c) == 1)&(min(c) >= 0),',...
           '[y,imin]=min(gf*c'');x=zeros(pg{1}(3),pg{1}(4));x1(:)=x;',...
           'Nr=imin,x(:)=pg{2}(imin,n+1:end), f=gf(imin,:),',...
           'clear x1 m n c pg gf d y imin;close(gcf);',...
       'else,',...
           'esmsg('' The weighting factors must be positive and normalized!'',''Error'',''error'');',...
       'end'];
     pg=get(gcf,'UserData');
     vlchoice(pg{1}(1),callback);


  case 'lpnorm',
     %     /    mf                    \  1/p 
     %     |  \---                    |
     %     |   >                 p    |
     % min |  /___ c_i * gf_i(x)      |                   1 <= p <= unendlich
     %     \                          /
     %  x      i=1 
     

     callback=[...
       'fg=findobj(''name'',''Dialog to the obtained Pareto-Set'');pg=get(fg,''UserData'');',...
       'n=pg{1}(1);gf=pg{2}(:,2:n);d=get(gcf,''UserData'');m=pg{1}(2);c=zeros(1,n);',...
       'for i=1:n, c(i)=str2num(get(d(i),''string''));end;',...
       'if (c(1) < 1),',...
           'esmsg('' The exponential factor must be bigger than 1!'',''Error'',''error'');',...
       'elseif (sum(c(2:n)) ~= 1)|(min(c(2:n)) < 0),',...
           'esmsg('' The weighting factors must be positive and normalized!'',''Error'',''error'');',...
       'else,',...
           'gfnew=gf.^c(1);',...
           '[y,imin]=min(gfnew*c(2:n)'');x=zeros(pg{1}(3),pg{1}(4));x1(:)=x;',...
           'Nr=imin,x(:)=pg{2}(imin,n+1:end), f=gf(imin,:),',...
           'clear x1 m n c pg gf d y imin gfnew;close(gcf);',...
       'end'];
     pg=get(gcf,'UserData');
     vlchoice(pg{1}(1)+1,callback);


  case 'goal',

     %     /    mf                              \  1/p 
     %     |  \---                               |
     %     |   >                            p    |
     % min |  /___ c_i * |gf_i(x) -theta_i|      |                   1 <= p <= unendlich
     %     \                                    /
     %  x      i=1 
     

     callback=[...
       'fg=findobj(''name'',''Dialog to the obtained Pareto-Set'');pg=get(fg,''UserData'');',...
       'n=pg{1}(1);gf=pg{2}(:,2:n);d=get(gcf,''UserData'');m=pg{1}(2);c=zeros(1,n);',...
       'for i=1:n, c(i)=str2num(get(d(i),''string''));end;',...
       'if (c(1) < 1),',...
           'esmsg('' The exponential factor must be bigger than 1!'',''Error'',''error'');',...
       'elseif (sum(c(2:n)) ~= 1)|(min(c(2:n)) < 0),',...
           'esmsg('' The weighting factors must be positive and normalized!'',''Error'',''error'');',...
       'else,',...
           'gfmin=min(gf);',...
           'for i=1:pg{1}(5), gfnew(i,:)=gf(i,:)-gfmin;end;',...
           'gfnew=gfnew.^c(1);',...
           '[y,imin]=min(gfnew*c(2:n)'');x=zeros(pg{1}(3),pg{1}(4));x1(:)=x;',...
           'Nr=imin,x(:)=pg{2}(imin,n+1:end), f=gf(imin,:),',...
           'clear x1 m n c pg gf d y imin gfnew;close(gcf);',...
       'end'];
     pg=get(gcf,'UserData');
     vlchoice(pg{1}(1)+1,callback);


  case 'epsilon',
     % min gf_i(x) |
     %  x          | gf_j(x) <= c_j for all j=1,mf and i~=j
     %  if the i-th function needs to be chose to minimize, the input c_i=inf.


     callback=[...
       'fg=findobj(''name'',''Dialog to the obtained Pareto-Set'');pg=get(fg,''UserData'');',...
       'n=pg{1}(1);gf=pg{2}(:,2:n);d=get(gcf,''UserData'');m=pg{1}(2);c=zeros(1,n-1);',...
       'for i=1:n-1, c(i)=str2num(get(d(i),''string''));end;',... 
       'if (min(c) < 0),',...
           'esmsg('' The weighting factors must be positive and normalized!'',''Error'',''error'');',...
       'else,',...
           'I1=[1:pg{1}(5)];ithfun=find(c==Inf);gfnew=gf;gfnew(:,ithfun)=[];c(ithfun)=[];',...
           'for i=1:n-2, ',...
               'gg=gfnew(I1,:);',...
               'I1=I1(find(gg(:,i) <= c(i)));',...
           'end;',...
           'if length(I1),',...
               '[y,imin]=min(gf(I1,ithfun));imin=I1(imin);x=zeros(pg{1}(3),pg{1}(4));x1(:)=x;',...
               'if isempty(imin),',...
                   'esmsg(''Sorry, there is not a solution!'',''Warning'',''error'');',...
               'else,',...
                   'Nr=imin,x(:)=pg{2}(imin,n+1:end), f=gf(imin,:),',...
               'end;',...
               'clear x1 m n c pg gf d y imin gg gfnew;close(gcf);',...
           'else,',...
               'esmsg(''Sorry, there is not a solution!'',''Warning'',''error'');',...
           'end,',...            
       'end'];
     pg=get(gcf,'UserData');
     vlchoice(pg{1}(1),callback);


  case 'germeier',
     %                  ---
     %                  \
     % min (1/p) * ln (  > exp(p*gf_i(x)/c_i))
     %  x               /
     %                  ---

  
     callback=[...
       'fg=findobj(''name'',''Dialog to the obtained Pareto-Set'');pg=get(fg,''UserData'');',...
       'n=pg{1}(1);gf=pg{2}(:,2:n);d=get(gcf,''UserData'');m=pg{1}(2);c=zeros(1,n);',...
       'for i=1:n, c(i)=str2num(get(d(i),''string''));end;',...
       'if (min(c) <= 0),',...
           'esmsg('' The weighting factors must be positive!'',''Error'',''error'');',...
       'else,',...
           'gfnew=gf;',...
           'for i=1:pg{1}(5), gfnew(i,:)=gf(i,:)./c(2:n); end,',...
           'gfnew=exp(c(1)*gfnew);',...
           '[y,imin]=min(log(sum(gfnew'')));x=zeros(pg{1}(3),pg{1}(4));x1(:)=x;',...
           'Nr=imin,x(:)=pg{2}(imin,n+1:end), f=gf(imin,:),',...
           'clear x1 m n c pg gf d y imin gfnew;close(gcf);',...
       'end'];
     pg=get(gcf,'UserData');
     vlchoice(pg{1}(1)+1,callback);


  case 'paretoplot',
     fg=findobj('name','Dialog to the obtained Pareto-Set');pg=get(fg,'UserData');
     n=pg{1}(6:7);gf=pg{2}(:,[n(1),n(2)]);
     fg=findobj('name','Display of the Pareto-Subset');
     if ~flag,
        figure('Number','off','Menubar','none','name','Display of the Pareto-Subset');
     else,
        figure(fg);
     end
     figplot=plot(gf(:,1),gf(:,2),'r*');
     title(['Pareto-Set of the Functions Nr.: ',int2str(n(1)) ' and ' int2str(n(2))] );
     xlabel(['Fun' int2str(n(1))]);ylabel(['Fun' int2str(n(2))])
     uimenu('label','Change Axes ','call',[...
         'ax = get(gcf,''Children'');',...
         'for i=1:length(ax),',...
            'if strcmp(get(ax(i),''Type''),''axes''),',...
              'xlim = get(ax(i),''XLim'');ylim = get(ax(i),''YLim'');',...
            'end;',...
         'end;',...
         'set(gcf,''UserData'',[xlim,ylim]);esdialog(''Change Axes'');']);
     uimenu('label','Undo ','call',[...
         'ax = get(gcf,''Children'');ax1=get(gcf,''UserData'');',...
         'for i=1:length(ax),',...
             'if strcmp(get(ax(i),''Type''),''axes''),',...
                  'set(ax(i),''XLim'',ax1(1:2),''YLim'',ax1(3:4));',...
             'end;',...
         'end;']);
     uimenu('label','Close Figure ','call','set(gcf,''visible'',''off'')');

     set(figplot,'ButtonDownFcn',...
     ['fg=findobj(''name'',''Dialog to the obtained Pareto-Set'');pg=get(fg,''UserData'');',...
     'p=get(gca,''CurrentPoint'');n1=pg{1}(6);n2=pg{1}(7);',...
     'gf=pg{2}(:,[n1,n2]);mf=pg{1}(1);nvars=pg{1}(2);nI=pg{1}(5);xx=pg{2}(:,mf+1:end);',...
     'x=zeros(pg{1}(3),pg{1}(4));x1=x(:);pp=zeros(1,nI);',...
     'for i=1:nI, ',...
        'pp1=p(1,1:2)-gf(i,:);pp(i)=sqrt(pp1*pp1'');',...
     'end;',...
     '[ppmin,i]=min(pp);Nr=i,f=gf(i,:),x(:)=xx(i,:)'',end,']);

  case 'Change Axes',
     sunit=get(0,'Units');set(0,'units','Pixels'); 
     ss=get(0,'ScreenSize');mywidth=320;myheight=110;set(0,'Units',sunit);
     rect = [.5*(ss(3)-mywidth),.5*(ss(4)-myheight),mywidth,myheight];
     figure('units','pixels','Pos',rect,'numbertitle','off', ...
       'name','Choose the Axis Limits','Menubar','none','Color',[0 1 1],'Resize','off');

     uicontrol(Std,'Style','text','Pos',[.15 .7 .45 .2],...
       'Back',[.8 .8 .8],'HorizontalAlignment','left',...
       'Fore','black','String','X-Axis Upper Limit');
     d1=uicontrol(Std,'Style','edit','Pos',[.7 .7 .15 .2],...
       'Back','white','String',num2str([]));
     uicontrol(Std,'Style','text','Pos',[.15 .4 .45 .2],...
       'Back',[.8 .8 .8],'HorizontalAlignment','left',...
       'Fore','black','String','Y-Axis Upper Limit');
     d2=uicontrol(Std,'Style','edit','Pos',[.7 .4 .15 .2],...
       'Back','white','String',num2str([]));

     set(gcf,'UserData',[d1 d2])
     uicontrol(Std,'Style','push','String','OK',...
       'Pos',[.6 .05 .2 .2],'callback',[...
       'pl=get(gcf,''UserData'');',...
       'xaxis=str2num(get(pl(1),''string''));yaxis=str2num(get(pl(2),''string''));',...
       'close(gcf);',...
       'ax = get(gcf,''Children'');',...
       'for i=1:length(ax),',...
           'if strcmp(get(ax(i),''Type''),''axes''),',...
              'set(ax(i),''XLim'',[0 xaxis],''YLim'',[0 yaxis]);',...
           'end;',...
       'end;']);

     uicontrol(Std,'Style','push','String','Close',...
       'Pos',[.2 .05 .2 .2],'callback','close(gcf)');


  case 'another',
     callback=[...
       'fg=findobj(''name'',''Dialog to the obtained Pareto-Set'');',...
       'pg=get(fg,''UserData'');n=pg{1}(1);gf=pg{2}(:,2:n);',...
       'd=get(gcf,''UserData'');m=pg{1}(2);sign=zeros(1,n-1);c=zeros(1,n-1);',...
       'for i=1:n-1, ',...
       '    [sign(i),c(i)]=str2nums(get(d(i),''string''));',...
       'end;',...
       'I1=[1:pg{1}(5)];I2=I1;h2=pg{3};',...
       'for i=1:n-1, ',...
            'gg=gf(I1,:);',...
            'if sign(i) == 10, ',...
            '   I11=find(gg(:,i) >= c(i)); ',...
            'elseif sign(i) == 1,',...
            '   I11=find(gg(:,i) > c(i));',...
            'elseif sign(i) == 0,',...
            '   I11=find(gg(:,i) == c(i));',...
            'elseif sign(i) == -1,',...
            '   I11=find(gg(:,i) < c(i));',...
            'elseif sign(i) == -10,',...
            '   I11=find(gg(:,i) <= c(i));',...
            'end; ',...
            'I1=I1(I11); if isempty(I1), break, end;',...
       'end;',...
       'if ~isempty(I1),',...
           'close(gcf);',...
           'I2(I1)=[];figure(fg);for i=1:length(I2),set(h2(I2(i)),''Visible'',''off''),end;',...
           'clear I1 I11 m n c gf pg d gg h2 I2;',...
       'else,',...
           'close(gcf);esmsg('' Sorry, individuals do not exist!'',''Warning'',''error'');',...
       'end'];
      pg=get(gcf,'UserData'); 
      vlchoice(pg{1}(1),callback,'Choosing the function values');


  case 'back',
     pg=get(gcf,'UserData');
     nI=pg{1}(5);h=pg{3};
     for i=1:nI, 
          g=get(h(i),'Visible');
          if g(1:2)=='of', set(h(i),'Visible','on');end
     end


  case 'Help',
     hlpStr{1}= ...                                                                
        [' The Evolution Strategy returns a pareto-optimal set  between     '  
         ' all the given objective functions.  It is necessary to choose    '  
         ' the best solution from this set.  Using this function you can    '  
         ' easily make the dialogue with the obtained  pareto-optimal set.  '  
         '                                                                  '  
         ' The so-called table <The optimal table> is shown in  the first   '  
         ' lines of the window with the name                                '  
         '              <Dialog to the obtained pareto-set>.                '  
         ' Here you can see the selfish minima of each objective            '  
         ' function that are marked with the color red. That means  you     '  
         ' can get here the first informations about the  structure of the  '  
         ' pareto-optimal set.                                              '  
         '                                                                  '  
         ' Because it is impossible to display all the set of pareto-optimal'  
         ' solutions on the screen when the dimension of the objective      '  
         ' vector is too large,  here it allows the users to display  each  '  
         ' pareto-optimal subset in the  two-dimensional space of the       '  
         ' graphical figure by using the button: <Graphical display>.       '  
         '                                                                  '  
         ' Using the button <Close> to close the current help window,       '  
         ' then the help window would be invisible.                         '  
         '                                                                  '];

    hlpStr{2}= ...                                                                   
        ['                                                                  '  
         ' There are lots of the methods to choose the best solution from   '  
         ' the pareto-optimal set.                                          '  
         ' Suppose, you have Npop  individuals and N objective functions.   '  
         ' Each individual  has the objective function vector:              '  
         '          f(ind) = (f_1(ind), f_2(ind),...,f_N(ind)).             '  
         '                                                                  '  
         ' Method 1: Choose only the number of the solution.                '  
         '       Click the button <Number> on the frame <Options>  and      '  
         '       then input the desirable number . The values of the        '  
         '       objective variables and the objective functions are        '  
         '       returned in the Matlab Command Window.                     '  
         '                                                                  '  
         '                                                                  '  
         ' Method 2: The first minimax.                                     '  
         '       Choose the individual so that  the scalar function:        '  
         '                   max     c_i * f_i(ind)  \rightarrow min,       '  
         '                 1< i < N                                         '  
         '       where c_i are the weighting factors for the i-th function: '  
         '                      c_1 + c_2 +...+ c_N =1.                     '  
         '       Click the button <Minimax1> to input all c_i .             '  
         '                                                                  '];  
 
   hlpStr{3}= ...                                                                                
        ['                                                                  '  
         ' Method 3: The second Minimax.                                    '  
         '       Choose an individual so that:                              '  
         '                  min              max  (f_i(ind) - \Theta_i),    '  
         '                1<ind<Npop   1< i <N                              '  
         '       theta_i are goals of the optimization and often taken to   '  
         '       be the achieved selfish minimum value of each objective    '  
         '       function for all current individuals.                      '  
         '       Click <Minimax2> to call this method.                      '  
         '                                                                  '  
         '  Method 4: The linear weighting method.                          '  
         '       Choose an individual so that:                              '  
         '               min       \Sigma_{i=1}^N c_i*f_i(ind),             '  
         '            1< ind <Npop                                          '  
         '       Click <Weighting> to input the weighting factors c_i.      '  
         '                                                                  '  
         '  Method 5: The linear programming norm method:                   '  
         '               min   ( \Sigma_{i=1}^N c_i*f_i(ind)^{ p} )^{ 1/p}  '
         '            1< ind < Npop                                         ' 
         '                                                                  '  
         '       where  the scalar factor p must be  bigger than 1.         '
         '       Click <Lp-norm> to input values of p and c_i.              '];
 

                      
    hlpStr{4}= ...  
        ['  Method 6: The goal method:                                                           '
         '               min   (\Sigma_{i=1}^N c_i*|f_i(ind) - \Theta_i |^{ p})^{ 1/p}           '
         '            1< ind < Npop                                                              ' 
         '                                                                                       '  
         '       where  the scalar factor p must be  bigger than 1.                              '
         '       Click <Goal> to input values of p and c_i.                                      '
         '                                                                                       '
         '  Method 7: The Epsilon-Method:                                                        '
         '       First, choose the objective function for minimizing, e.g.                       '
         '       the k-th function. Choose an individual to minimize the                         '
         '       k-th function, when all other objective functions are not                       '
         '       bigger than the given epsilon-values, that means:                               '
         '                      min         f_k(ind) |                                           '  
         '                  1< ind < Npop       | f_i(ind) \leq \epsilon_i, \forall i \neq k     '
         '       Click <Epsilon> to choose the k-th function (by input: Inf                      '
         '       in the k-th row) and to input the other e_i (by input: the                      '    
         '       numerical values).                                                              '];

                                                      
     hlpStr{5}= ... 
        ['                                                                              ' 
         '  Method 8: The Germeier method:                                              '  
         '                      min  ln \Sigma_{i=1}^N e^{p * f_i /c_i}                 ' 
         '                   1< ind <Npop                                               ' 
         '                                                                              '
         '        where the scalar factor p must be bigger than 1.                      '
         '        Click <Germeier> to input values of p and c_i.                        '
         '                                                                              ' 
         '  Method 9: To communicate to the pareto-optimal set you can                  '
         '        display or clear all solutions that are satisfied some                '
         '        given restrictions (using <Execute>-Button). For example,             '
         '                                                                              ' 
         '        To display all solutions so that f_i \geq 10.1 & f_j \leq 0.5         '
         '        you click the button <Execute>, then input values as belows           '
         '            <For the i-th function> you input:   \geq 10.1                    '
         '            <For the j-th function> you input:   \leq 0.5                     '
         '                                                                              '];

     
    TitlePages={'Wellcome to the Dialogue System',...
        'The Choosing Methods (Page 1)  ',...
        'The Choosing Methods (Page 2)  ',...
        'The Choosing Methods (Page 3)  ',...
        'The Choosing Methods (Page 4)  '};
    eshlpfun('Help for Dialogue with the Results',TitlePages,hlpStr);                
end
