function design(action,Par1,Par2)
% design(action,Par1,Par2)
% Create a Options-Window for Multiobjective Controller Design 



% Note: 
%   PerfConstr - a (1 x 8)-cell array containing all constraints on performances
%        [manip,output,risetime,settling,overshort,peak,error,polregion]
%   Perf       - a (1 x 8)-cell array containing some following infos 
%                Perf{i}=[type, index]
%                type = 1 (0) if this performance as OBJECTIVE or CONSTRAINT 
%                index - a vector of signals to be considered by this
%                performance   
%
% All Rights Reserved, 
% Revision 3.0, Oct. 1996
% Control System Design Toolbox 1993-96
% To Thanh Binh University of Magdeburg Germany 


if nargin < 3, 
   Par2=inf;
   if nargin < 2, 
      Par1=inf;
      if nargin < 1, 
         action ='Initialize' ;
      end
   end 
end  

% Get a good font for this platform.
[fname,fsize] = bestfont(computer);
Std.Units='norm';
Std.FontName=fname;
Std.FontSize=fsize;

switch action,

   case 'Initialize',

     units_old=get(0,'units');
     set(0,'units','Pixels'); 
     ss = get(0,'ScreenSize');
     set(0,'units',units_old); 
     SHH=.0479*ss(4);SEW=.0063*ss(3); 
 
     w = 640; h = 480;
     pp=[.5*(ss(3)-w) .5*(ss(4)-h) w h];
     fg=figure('units','pixels','Pos',pp,'numbertitle','off', 'name','Multiobjective Controller Design',...
        'Menubar','none','Color',[0 0 1],'Resize','off','Visible','off',...
        'WindowButtonMotionFcn','cdhelper','tag','DesignMainFig');

     uicontrol(Std,'Style','push','String','Help','Pos',[.55 .88 .17 .09],...   
        'Callback','design(''Help'');','tag','DesignHelp');   
     uicontrol(Std,'Style','push','String','Info...','Pos',[.55 .74 .17 .09],...   
        'Callback','design(''About'');','tag','DesignInfos');  
  
     uicontrol(Std,'Style','push','String','Close','Pos',[.78 .88 .17 .09],'tag','CDClose',...
        'Callback',[...
        'fud=get(gcf,''UserData'');FunName=get(fud{1}{21},''String'');close(gcf);',...
        'MsgTxt=str2mat(''Would you like to use this design task again?'','''',''Good Bye!'');',...
        'OKCall=''close(gcf);'';',...
        'NoCall=''FunName=get(gcf,''''UserData''''); delete([FunName,''''.mat'''']); delete([FunName,''''.m'''']);close(gcf);'';',...
        'esmsg(MsgTxt,''Info'',''info'',OKCall, NoCall,''Yes'',''No'');',...
        'set(gcf,''UserData'',FunName);clear fud FunName;']);
  

     ck_ok=uicontrol(Std,'Style','push','String','Start Design', 'Pos',[.78 .74 .17 .09],...
        'Callback','design(''Start'');','tag','DesignStart');

     uicontrol(Std,'Style','push','String','Simulation', 'Pos',[.78 .6 .17 .09],...
        'Callback','design(''Simulation'');','tag','DesignSimulation');
     uicontrol(Std,'Style','text','String','Name of the Task:', 'Pos',[.55 .7 .20 .03],...
        'Back','b','Fore','y','HorizontalAlignment','left');
     FunName=uicontrol(Std,'Style','edit','String','ctrlftmp', 'Pos',[.55 .6 .17 .09],...
        'Back','w','Fore','b','tag','DesignFunName');

     aheight=.50;awidth=.485;
     
     axes('Units','norm','XTick',[],'YTick',[], ...
        'XLim',[0 awidth],'YLim',[0 aheight],'Box','on', ...
        'Pos',[.51 .07 .485 .5],'Color',[.07,.5,.0]);

     Controller_List=['Controller|PI|PID|LQG|H-inf|LSDP|Mu'];
     Callback=[...
         'Ctrl_hndl=findobj(''tag'',''DesignCtrlType'');',...
         'val= get(Ctrl_hndl,''Value'');',...
         'if val==2,',...     
             'guiclcfg(''pi'');',...
         'elseif val==3,',...     
             'guiclcfg(''pid'');',...
         'elseif val==4,',...     
             'guiclcfg(''lqg'');',...
         'elseif val==5,',...     
             'guiclcfg(''hinf'');',...
         'elseif val==6,',...     
             'guiclcfg(''lsdp'');',...
         'elseif val==7,',...     
             'guiclcfg(''mu'');',...
         'end'];


     uicontrol(Std,'style','popup','String',Controller_List,...
         'tag','DesignCtrlType','pos',[.51+.15*awidth .07+.55*aheight .32*awidth .13],'fore','b',...
         'Call',Callback,'Enable','off');
     Plant.a=[];Plant.b=[]; Plant.c=[];Plant.d=[];Plant.e=[];Plant.dim=[];Plant.output=0;Plant.ssval=0;
     uicontrol(Std,'style','push','String','Plant','UserData',Plant,...
         'tag','DesignPlant','pos',[.51+.56*awidth .07+.55*aheight .32*awidth .13],'fore','b',...
         'Call','fud=get(gcf,''UserData'');for i=7:14,set(fud{1}{i},''Enable'',''on'');end;ssp_get;');

     % Open a frame, an edit window for choosing index for outputs or inputs
     DlgFrame=uicontrol(Std,'style','frame','pos',[.515 .075 .475 .15],'back',[.4 .8 .8],'Visible','off',...
         'tag','DesignInOutIndex');
     
     DlgEdit=uicontrol(Std,'style','edit','String','','Visible','off',...
         'pos',[.52 .08 .465 .08],'Back','w','Call',[...
         'fud=get(gcf,''UserData'');Par=get(fud{1}{19},''UserData'');',...
         'ud=get(Par(2),''UserData'');ud{Par(1)}=[1 str2num(get(fud{1}{19},''String''))];',...
         'set(Par(2),''UserData'',ud); for i=18:20,set(fud{1}{i},''Visible'',''off'');end;clear fud Par ud;']);

     DlgTxt=uicontrol(Std,'style','text','String','','pos',[.525 .16 .455 .05],...
         'fore','b','Back',[.4 .8 .8],'HorizontalAlignment','left','Visible','off');

     text(.02*awidth,.8*aheight,'ref','Color','y');
     text(.5*awidth,.8*aheight,'u','Color','y');
     text(.92*awidth,.8*aheight,'y','Color','y');

     arrow(.02*awidth,.72*aheight,.126*awidth,'r',.01,15,2,'y');
     arrow(.08*awidth,.62*aheight,.066*awidth,'r',.01,15,2,'y');
     arrow(.465*awidth,.675*aheight,.093*awidth ,'r',.01,15,2,'y');
     arrow(.88*awidth,.675*aheight,.1*awidth,'r',.01,15,2,'y');

     arrow(.92*awidth,.675*aheight,.32*aheight,'d',0,0,2,'y');
     arrow(.92*awidth ,.355*aheight,.84*awidth,'l',0,0,2,'y');
     arrow(.08*awidth ,.355*aheight,.265*aheight,'u',0,0,2,'y');

     for i=1:8,PerfConstr{i}=[];end
     ypos=.924; vspace=.08;frwidth=.48;xspace=.01;
     PerfFrm=uicontrol('units','norm','Style','frame','Pos',[.007 ypos-8.5*vspace .496 8.5*vspace+.07],...
        'Back',[.07,.5,.0],'Userdata',PerfConstr,'tag','DesignPerfFrm');
     %Notice: Userdata of frame contains the given restriction boundaries.

     PerfType=PerfConstr;  
     Perf=uicontrol(Std,'Style','text','String','Control Performance Indice',...   
        'Pos',[.01 .92 .49 .07],'Back',[.4 .8 .8],'Fore','b',...
        'tag','DesignPerform','Userdata',PerfType);  
     %Notice: Userdata of this uicontrol contains the performance types

     uicontrol(Std,'Style','text','String','For the Time Responses',...   
        'Pos',[.02 ypos-vspace .46 .8*vspace],'Back',[.07,.5,.0],'Fore','y'); 
     ypos=ypos-1.2*vspace;

     ck_manipo=uicontrol(Std,'Style','checkbox','String','Obj','HorizontalAlignment','left',...   
        'Pos',[.02+.55*frwidth ypos-vspace .16*frwidth vspace],...
        'Visible','off','call','lc_call(7,''off'',''obj'');','tag','ManipObj');
     ck_manipc=uicontrol(Std,'Style','checkbox','String','Con','HorizontalAlignment','left',...   
        'Pos',[.028+.71*frwidth ypos-vspace .16*frwidth vspace],'Visible','off',...
        'Call','lc_call(7,''on'',''cons'');','tag','ManipConst');
     ck_manipK=uicontrol(Std,'Style','push','String','OK','Visible','off','Enable','off',...
        'Pos',[.035+ .87*frwidth ypos-vspace .09*frwidth vspace],'tag','ManipOK','Call',...
       ['fud=get(gcf,''Userdata'');',...
        'pl=get(fud{1}{7},''Userdata'');set(pl(3),''Fore'',''red'');',...
        'design(''set_constraint'',''Boundaries on Plant Inputs'',1);']);
     ck_manip=uicontrol(Std,'Style','checkbox','String','Manipulation',...
        'HorizontalAlignment','left','tag','ManipName',...  
        'Pos',[.012 ypos-vspace .55*frwidth vspace],'Userdata',[ck_manipo,ck_manipc,ck_manipK],...
        'Fore','b','call','lc_call1(7);');

 
     ck_outo=uicontrol(Std,'Style','checkbox','String','Obj','HorizontalAlignment','left',...   
        'Pos',[.02+.55*frwidth ypos-2*vspace .16*frwidth vspace],'tag','OutputObj',...
        'Visible','off','call','lc_call(8,''off'',''obj'');');
     ck_outc=uicontrol(Std,'Style','checkbox','String','Con','HorizontalAlignment','left',...   
        'Pos',[.028+.71*frwidth ypos-2*vspace .16*frwidth vspace],'Visible','off',...
        'Call','lc_call(8,''on'',''cons'');','tag','OutputConst'); 
     ck_outK=uicontrol(Std,'Style','push','String','OK','Visible','off','Enable','off',...
        'Pos',[.035+ .87*frwidth ypos-2*vspace .09*frwidth vspace],'tag','OutputOK','Call',...
       ['fud=get(gcf,''Userdata'');',...
        'pl=get(fud{1}{8},''Userdata'');set(pl(3),''Fore'',''red'');',...
        'design(''set_constraint'',''Boundaries on Plant Outputs'',2);']);
     ck_out =uicontrol(Std,'Style','checkbox','String','Output Restriction','tag','OutputName',...
        'HorizontalAlignment','left','Pos',[.012 ypos-2*vspace .55*frwidth vspace],...
        'Userdata',[ck_outo,ck_outc,ck_outK],'Fore','b','call','lc_call1(8);');
 

     ck_riseo=uicontrol(Std,'Style','checkbox','String','Obj','HorizontalAlignment','left',...   
        'Pos',[.02+.55*frwidth ypos-3*vspace .16*frwidth vspace],...
        'Visible','off','call','lc_call(9,''off'',''obj'');','tag','RiseTimeObj');
     ck_risec=uicontrol(Std,'Style','checkbox','String','Con','HorizontalAlignment','left',...   
        'Pos',[.028+.71*frwidth ypos-3*vspace .16*frwidth vspace],'Visible','off',...
        'Call','lc_call(9,''on'',''cons'');','tag','RiseTimeConst');
     ck_riseK=uicontrol(Std,'Style','push','String','OK','Visible','off','Enable','off',...
        'Pos',[.035+ .87*frwidth ypos-3*vspace .09*frwidth vspace],'tag','RiseTimeOK','Call',...
       ['fud=get(gcf,''Userdata'');',...
        'pl=get(fud{1}{9},''Userdata'');set(pl(3),''Fore'',''red'');',...
        'design(''set_constraint'',''Boundaries on Risetime'',3);']);
     ck_rise =uicontrol(Std,'Style','checkbox','String','Rise Time','HorizontalAlignment','left',...   
        'Pos',[.012 ypos-3*vspace .55*frwidth vspace],'tag','RiseTimeName',...
        'Userdata',[ck_riseo,ck_risec,ck_riseK],'Fore','b','call','lc_call1(9)');

     h=ypos-4*vspace+.001;
     ck_setlo=uicontrol(Std,'Style','checkbox','String','Obj','HorizontalAlignment','left',...   
        'Pos',[.02+.55*frwidth h .16*frwidth vspace],'tag','SettlingTimeObj',...
        'Visible','off','call','lc_call(10,''off'',''obj'');');
     ck_setlc=uicontrol(Std,'Style','checkbox','String','Con','HorizontalAlignment','left',...   
        'Pos',[.028+.71*frwidth h .16*frwidth vspace],'Visible','off','tag','SettlingTimeConst',...
        'Call','lc_call(10,''on'',''cons'');');
     ck_setlK=uicontrol(Std,'Style','push','String','OK','tag','SettlingTimeOK',...
        'Pos',[.035+ .87*frwidth h .09*frwidth vspace],...
        'Visible','off','Enable','off','Call',...
       ['fud=get(gcf,''Userdata'');',...
        'pl=get(fud{1}{10},''Userdata'');set(pl(3),''Fore'',''red'');',...
        'design(''set_constraint'',''Boundaries on Settling Time'',4);']);
     ck_setl =uicontrol(Std,'Style','checkbox','String','Settling Time','tag','SettlingTimeName',...
        'HorizontalAlignment','left','Pos',[.012 h .55*frwidth vspace],...
        'Userdata',[ck_setlo,ck_setlc,ck_setlK],'Fore','b','call','lc_call1(10)');

     h=ypos-5*vspace+.001;

     ck_overo=uicontrol(Std,'Style','checkbox','String','Obj','HorizontalAlignment','left',...   
        'Pos',[.02+.55*frwidth h .16*frwidth vspace],'tag','OverShootObj',...
        'Visible','off','call','lc_call(11,''off'',''obj'');');
     ck_overc=uicontrol(Std,'Style','checkbox','String','Con','HorizontalAlignment','left',...   
        'Pos',[.028+.71*frwidth h .16*frwidth vspace],'Visible','off',...
        'Call','lc_call(11,''on'',''cons'');','tag','OverShootConst');
     ck_overK=uicontrol(Std,'Style','push','String','OK','Visible','off','Enable','off',...
        'Pos',[.035+ .87*frwidth h .09*frwidth vspace],'tag','OverShootOK','Call',...
       ['fud=get(gcf,''Userdata'');',...
        'pl=get(fud{1}{11},''Userdata'');set(pl(3),''Fore'',''red'');',...
        'design(''set_constraint'',''Boundaries on Overshoot'',5);']);
     ck_over =uicontrol(Std,'Style','checkbox','String','Overshoot','HorizontalAlignment','left',...   
        'Pos',[.012 h .55*frwidth vspace],'tag','OverShootName',...
        'Userdata',[ck_overo,ck_overc,ck_overK],'Fore','b','call','lc_call1(11)');

     h=ypos-6*vspace+.001;

     ck_peako=uicontrol(Std,'Style','checkbox','String','Obj','HorizontalAlignment','left',...   
        'Pos',[.02+.55*frwidth h .16*frwidth vspace],'tag','Time2PeakObj',...
        'Visible','off','Call','lc_call(12,''off'',''obj'');');
     ck_peakc=uicontrol(Std,'Style','checkbox','String','Con','HorizontalAlignment','left',...   
        'Pos',[.028+.71*frwidth h .16*frwidth vspace],'Visible','off','tag','Time2PeakConst',...
        'Call','lc_call(12,''on'',''cons'');');
     ck_peakK=uicontrol(Std,'Style','push','String','OK','tag','Time2PeakOK',...
        'Pos',[.035+ .87*frwidth h .09*frwidth vspace],...
        'Visible','off','Enable','off','Call',...
       ['fud=get(gcf,''Userdata'');',...
        'pl=get(fud{1}{12},''Userdata'');set(pl(3),''Fore'',''red'');',...
        'design(''set_constraint'',''Boundaries on Time to Peak'',6);']);
     ck_peak =uicontrol(Std,'Style','checkbox','String','Time to Peak','tag','Time2PeakName',...
        'HorizontalAlignment','left','Pos',[.012 h .55*frwidth vspace],...
        'Userdata',[ck_peako,ck_peakc,ck_peakK],'Fore','b','call','lc_call1(12)');

     h=ypos-7*vspace+.001;

     ck_erroro=uicontrol(Std,'Style','checkbox','String','Obj','HorizontalAlignment','left',...   
        'Pos',[.02+.55*frwidth h .16*frwidth vspace],'Visible','off',...
        'call','lc_call(13,''off'',''obj'');','tag','SSErrorObj');
     ck_errorc=uicontrol(Std,'Style','checkbox','String','Con','HorizontalAlignment','left',...   
        'Pos',[.028+.71*frwidth h .16*frwidth  vspace],'Visible','off','tag','SSErrorConst',...
        'Call','lc_call(13,''on'',''cons'');');
     ck_errorK=uicontrol(Std,'Style','push','String','OK','tag','SSErrorOK',...
        'Pos',[.035+ .87*frwidth h .09*frwidth vspace],'Visible','off','Enable','off','Call',...
       ['fud=get(gcf,''Userdata'');',...
        'pl=get(fud{1}{13},''Userdata'');set(pl(3),''Fore'',''red'');',...
        'design(''set_constraint'',''Boundaries on Steady-State Error'',7);']);
     ck_error =uicontrol(Std,'Style','checkbox','String','Steady-State Error',...
        'HorizontalAlignment','left','Pos',[.012 h .55*frwidth vspace],'tag','SSErrorName',...
        'Userdata',[ck_erroro,ck_errorc,ck_errorK],'Fore','b','call','lc_call1(13)');

     ypos=ypos-7.1*vspace;
     uicontrol('Style','frame','units','norm','Pos',[.007 ypos-2.4*vspace .496 2.4*vspace],...
        'Back',[.07,.5,.0]);
     ypos=ypos-.2*vspace; 

     uicontrol(Std,'Style','text','String','For the Pole Region','tag','PolRegionFrame',...
        'Pos',[.02 ypos-.8*vspace .46 .8*vspace],'Back',[.07 .5 0],'Fore','y');

     ck_polo=uicontrol(Std,'Style','checkbox','String','Obj','HorizontalAlignment','left',...   
        'Pos',[.02+.55*frwidth ypos-2*vspace .16*frwidth vspace],'tag','PolRegionObj',...
        'Visible','off','call','lc_call(14,''off'',''obj'');');
     ck_polc=uicontrol(Std,'Style','checkbox','String','Con','HorizontalAlignment','left',...   
        'Pos',[.028+.71*frwidth ypos-2*vspace .16*frwidth vspace],'Visible','off','tag','PolRegionConst',...
        'Call','lc_call(14,''on'',''cons'');');
     ck_polK=uicontrol(Std,'Style','push','String','OK','Visible','off','Enable','off',...
        'Pos',[.035+ .87*frwidth ypos-2*vspace .09*frwidth vspace],'tag','PolRegionOK','Call',...
       ['fud=get(gcf,''Userdata'');',...
        'pl=get(fud{1}{14},''Userdata'');set(pl(3),''Fore'',''red'');',...
        'goal_resf=get(fud{1}{17},''UserData'');',...
        'goal_resf{8}=[0;1];',...
        'set(fud{1}{17},''UserData'',goal_resf);']);
     ck_pol=uicontrol(Std,'Style','checkbox','String','Pole Region Types','tag','PolRegionName',...
        'HorizontalAlignment','left',...  
        'Pos',[.012 ypos-2*vspace .55*frwidth vspace],'Userdata',[ck_polo,ck_polc,ck_polK],...
        'Fore','b','call','lc_call1(14,1);');


     uicontrol('Style','frame','units','norm','Pos',[.001 .001 .998 .062],'back',[.4 .8 .8]);
     uicontrol(Std,'Style','text','Pos',[.005 0.005 .991 .054], ...
        'Back',[0.4 0.8 0.8],'String','Wellcome to the Controller Design',...
        'tag','DesignHelpStatus','fore','b');


     ud={pp(1), pp(2), pp(3), pp(4), SHH,SEW,ck_manip,ck_out,ck_rise,ck_setl,ck_over,ck_peak,ck_error,ck_pol,ck_ok,...
         Perf,PerfFrm, DlgFrame, DlgEdit, DlgTxt, FunName};
     for i=7:14, set(ud{i},'Enable','off'); end;
     set(gcf,'UserData',{ud},'Visible','on');



  case 'setindx',

     Plant=get(findobj('tag','DesignPlant'),'UserData');
     if isstruct(Plant),
        if isempty(Plant.dim),
           esmsg('No Plant for design!','Error','error');return;
        end
     else,
        esmsg('No Plant for design!','Error','error');return;
     end

     if Par1==1,
        uistr='Choose considered inputs:';xdefault=[1:Plant.dim(3)];
     else,
        uistr='Choose considered outputs:';xdefault=Plant.output;
     end
     fud=get(gcf,'UserData');
     set(fud{1}{19},'String',mat2str(xdefault),'Userdata',[Par1 Par2]);
     set(fud{1}{20},'String',uistr)
     for i=18:20, set(fud{1}{i},'Visible','on');end;


   case 'set_constraint',              
       
     fud=get(gcf,'UserData');
     choice5(Par1,300,170,[0 1 1],'on');
     PerfConstr=get(fud{1}{17},'UserData'); 
     Constr=PerfConstr{Par2};
     if isempty(Constr),
        Upper=[];Lower=[];
     else,
        Upper=Constr(2,:);Lower=Constr(1,:);
     end
     SignalIndx=get(fud{1}{16},'UserData');SignalIndx=SignalIndx{Par2};
     SignalIndx(1)=[];
     NumSignal=length(SignalIndx);
     if Par2 ==1, txttmp='input';else, txttmp='output';end
     if NumSignal > 1, 
        txttmp=[txttmp,'s'];txttmp1=mat2str(SignalIndx);txttmp2='Bounds';
     else,
        txttmp1=num2str(SignalIndx);txttmp2='Bound';
     end

     uicontrol(Std,'Style','text','Pos',[.05 .84 .9 .1],'Back',[0 1 1],...             
       'Fore','black','String',['For the corresponding ',txttmp,':'],...
       'HorizontalAlignment','left');
     uicontrol(Std,'Style','text','Pos',[.05 .75 .9 .1],'Back','w',...             
       'Fore','black','String',txttmp1);

     uicontrol(Std,'Style','text','Pos',[.05 .62 .6 .1],'Back',[0 1 1],...             
       'Fore','black','String',['Upper ', txttmp2,':'],'HorizontalAlignment','left');   
     upper=uicontrol(Std,'Style','edit','Pos',[.05 .49 .9 .14], ...  
       'Back','white','String',mat2str(Upper,4));  

     uicontrol(Std,'Style','text','Pos',[.05 .36 .4 .1],'Back',[0 1 1], ...  
       'Fore','black','String',['Lower ', txttmp2,':'],'HorizontalAlignment','left');   
     lower=uicontrol(Std,'Style','edit','Pos',[.05 .23 .9 .14],...   
       'Back','white','String',mat2str(Lower,4));  

     set(gcf,'UserData',{[lower upper Par2 NumSignal],fud,PerfConstr});
     uicontrol(Std,'Style','push','String','OK','Pos',[.6 .02 .2 .15],'callback',[...
        'pl=get(gcf,''UserData'');PerfConstr=pl{3};fud=pl{2};pl=pl{1};',... 
        'lower=str2num(get(pl(1),''string''));upper=str2num(get(pl(2),''string''));',...
        'NumSignal=pl(4);errortxt=[];',...
        'if length(lower)~=length(upper),',...
             'errortxt=''Upper and lower bound must have the same length!!'';',...
        'else,',...
             'if length(lower)~=NumSignal,',...
                'errortxt=[''Upper and lower bound must have the length '',num2str(NumSignal),''!!''];',...
             'else,',...
                'if (lower>upper),',...
                   'errortxt=str2mat(''Lower must be lower than upper!'',''Choose these again, please.'');',... 
                'end,',...
             'end,',...
        'end,',...
        'if ~isempty(errortxt),',...
             'esmsg(errortxt,''Error'',''error'');',... 
        'else,',...
             'Plant=get(findobj(''tag'',''DesignPlant''),''UserData'');',...
             'errortxt='''';',...
             'if (pl(3)==1),',...
                 'if max(lower) > Plant.dim(3),',...
                     'errortxt=''Too many inputs!!!'';',...
                 'end,',...
             'else,',...
                 'if max(lower) > Plant.dim(4),',...
                     'errortxt=''Too many outputs!!!'';',...
                 'end,',...
             'end,',... 
             'if ~isempty(errortxt),',...
                 'esmsg(errortxt,''Error'',''error'');',...
             'else,',... 
                 'PerfConstr{pl(3)}=[lower;upper];',...
                 'set(fud{1}{17},''UserData'',PerfConstr);',...
                 'clear pl fud lower upper errortxt PerfConstr Plant;close(gcf),',...
             'end;',...
        'end']);  
     uicontrol(Std,'Style','push','String','Close','Pos',[.2 .02 .2 .15],...
        'call','close(gcf)');


   case 'Help',
     hlpStr{1}= ... 
        ['                                              '
         ' The Evolution Strategy is a suitable tool    '
         ' for the Multicriteria Controller Design.     ' 
         ' Using it a set of pareto-optimal solutions   '  
         ' (trade-offs) between all the given design    '    
         ' criteria can be achieved.                    '  
         '                                              '  
         ' The Control Design Toolbox is now available  '  
         ' for the MIMO control systems.                '    
         '                                              '  
         ' This toolbox supports requirements both on   '
         ' eigenvalue regions in the left of the        '
         ' complex plane and on the dynamical behavior  '
         ' of the control system as rise time, settling '
         ' time etc. The last ones only can be computed '
         ' using simulations of the closed-loop system. '           
         '                                              '];     
     hlpStr{2}=...
        ['                                              ' 
         ' For the optimization, all the desired design '
         ' requirements can be expressed in terms of    '
         ' either objectives or constraints.            ' 
         '                                              ' 
         ' Many controller types are available.         '
         ' The control system must be described in the  '
         ' state-space.                                 '
         '                                              '];  

      eshlpfun('Help for the Controller Design','Help',hlpStr);


   case 'About',
      str_info=...
        [' Controller Design Toolbox                '
         ' Version 3.0 1993-1996                    ' 
         '                                          '
         ' Author: Dr. To Thanh Binh                '   
         ' Institut of Automation (IFAT)            '   
         ' Otto-von-Guericke-University of Magdeburg'
         ' Germany                                  '];
      esmsg(str_info,'About the Toolbox','es');


   case 'Start',
      fud=get(gcf,'UserData'); errorflag=0;

      % Check whether the main window for controller design has been used
      % before the next design starts. If it is, results of the last design
      % have to be saved for the further processing
         
      fudl=length(fud); 
      if fudl==4,
         message=str2mat('The old results will be destroyed.',...
             ' ','Do you want to save them?');
         YesCall=['fud=get(gcf,''UserData'');close(gcf);',...
                  'essave([fud{2}.file.matend,''.mat'']);'];
         NoCall=['fud=get(gcf,''UserData'');close(gcf);',...
            'delete([fud{2}.file.funtmp,''.m'']);delete([fud{2}.file.mattmp,''.mat'']);',...
            'delete([fud{2}.file.matopt,''.mat'']);delete([fud{2}.file.matend,''.mat'']);'];
            % Delete all temporary functions for evolution strategy

         warnfig=esmsg(message,'Save results?','warn',YesCall,NoCall,'Yes','No');
         set(warnfig,'UserData',fud);
         waitfor(warnfig);
         fud=fud{1};
      end              


      CtrlHndl=findobj('tag','DesignCtrlType');
      controller_code=get(CtrlHndl,'value');
      W1=0;W2=0;
      XPall=get(fud{1}{15},'UserData');
      ControlTask.x=XPall{1};
      ControlTask.xrange=XPall{2};

      errortxt='';
      if controller_code==1,
         errorflag=1;
         errortxt='Need a Controller! Please choose it again!';
      end

      if controller_code==2,
         ControllerType='PI';
      elseif controller_code==3,
         ControllerType='PID';
      elseif controller_code==4,
         ControllerType='LQG';
      elseif controller_code==5,
         ControllerType='Hinf';
         if exist('w1w2tmp.mat'),
            load w1w2tmp;
         else,
            errorflag=1;
            errortxt=str2mat(errortxt,'Need the weighting matrice!');
         end

      elseif controller_code==6,
         ControllerType='LSDP';
         if exist('w1w2tmp.mat'),
            load w1w2tmp;
         else,
            errorflag=1;
            errortxt=str2mat(errortxt,'Need the weighting matrice!');
         end
      elseif controller_code==7,
         ControllerType='Mu';
      end

      % Index for all classical performance 
      PerformType=get(fud{1}{16},'UserData');

      % check for requirements about the pole region
      PoleOpts=[];
      if ~isnan(PerformType{8}(1)),
         tmp=get(fud{1}{14},'UserData');
         PoleOpts=get(tmp(3),'UserData');
      end

      PerformIndx=[];
      for i=1:8, 
         if ~isnan(PerformType{i}(1)),
            PerformIndx=[PerformIndx [i;PerformType{i}(1)]];
         end
      end
      ConstExist=0;
      if ~isempty(PerformIndx), 
         % check now if the constraints exist
         if ~isempty(find(PerformIndx(2,:)==0)),ConstExist=1; end
      end
      ConstrVal=get(fud{1}{17},'UserData');

      % Load the Parameters of the Plant
      Plant=get(findobj('tag','DesignPlant'),'UserData');
      if isempty(Plant.dim)
         errorflag=1;
         errortxt=str2mat(errortxt,'Need a Plant! Please choose it again!');
      end

      % Get the name of the Controller Design Task
      FunName=get(fud{1}{21},'String');
      if isempty(FunName)
         errorflag=1;
         errortxt=str2mat(errortxt,'Need a name for the design task!');
      end
      % Check if the old and new function name are identical. If so, clear the old function
      % from the work space
      OldFunName=get(fud{1}{21},'UserData');
      if ~isempty(OldFunName),
         if strcmp(OldFunName,FunName), clear(FunName);end
      end
      set(fud{1}{21},'UserData',FunName);

      if ~errorflag,
         % Creating a required objective Function for the Optimization
         ctrlfgen(Plant,ControllerType,PerformType,PerformIndx,ConstrVal,PoleOpts,W1,W2,FunName);
         % Call the Optimization Routine
         ControlTask.fun=FunName;
         ControlTask.ConstExist=ConstExist;
         ControlTask.p=[];
         ControlTask.xrange=[];
         ControlTask.numpar=0;
         ControlTask.fcont=[];
         ControlTask.NewAxesLim=[];
         
         set(gcf,'UserData',{fud{1}});
         save(FunName,'ControlTask');
         evolut1(ControlTask,-gcf);                                   

      else,
         esmsg(errortxt,'Error','error');
      end



   case 'Simulation',
      %esmsg('Up to now, no simulation can be performed.','Info','info');
      esdialog('init',gcf);
end
